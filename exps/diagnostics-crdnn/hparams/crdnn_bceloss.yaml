# Seed needs to be set at top of yaml, before objects with parameters are made
random_seed: 2023
__set_seed: !!python/object/apply:torch.manual_seed [!ref <random_seed>]

# shared variables
task: diagnostics-crdnn
freeze_encoder: True
data_folder: ./data_og
dataset: Cambridge

# original audio and label file paths
wav_folder: !ref <data_folder>/<dataset>/wav/EN
audio_archive_path: !ref <wav_folder>/EN.zip
metadata_path: !ref <data_folder>/<dataset>/metadata/EN-metadata.csv

# data i/o paths
output_folder: !ref ./exps/<task>/brain-logs/
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
rir_folder: !ref <data_folder>

# Path where data manifest files will be stored
# The data manifest files are created by the data preparation script.
train_annotation: !ref ./exps/<task>/manifest/train.json
valid_annotation: !ref ./exps/<task>/manifest/valid.json
test_annotation: !ref ./exps/<task>/manifest/test.json
ratio: [0.6,0.2,0.2]
skip_prep: False

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>


error_stats: !name:speechbrain.utils.metric_stats.BinaryMetricStats


ckpt_interval_minutes: 15 # save checkpoint every N min


# Training Parameters
sample_rate: 16000
number_of_epochs: 50
batch_size: 16
lr_start: 0.1
lr_final: 0.001
n_classes: 1
dataloader_options:
    batch_size: !ref <batch_size>
    drop_last: True


# # Added noise and reverb come from OpenRIR dataset, automatically
# # downloaded and prepared with this Environmental Corruption class.
# env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
#     openrir_folder: !ref <rir_folder>
#     babble_prob: 0.0
#     reverb_prob: 1.0
#     noise_prob: 1.0
#     noise_snr_low: 0
#     noise_snr_high: 15

# # Adds speech change + time and frequency dropouts (time-domain implementation)
# # # A small speed change help to improve the performance of speaker-id as well.
# augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
#     sample_rate: !ref <sample_rate>
#     speeds: [95, 100, 105]


# Functions
mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

compute_features: !new:CRDNN_pipeline.feat_extract
    fs: 16000
    win_length: 32
    hop_length: 10
    n_fft: 512
    n_mels: 40

encoder: !new:CRDNN_pipeline.encoder
    input_size: 40
    cnn_channels: [64,128]
    rnn_layers: 2
    rnn_neruons: 256
    dnn_neurons: 256

classifier: !new:CRDNN_pipeline.Clf
    input_shape: [null, null, 256]
    activation: !name:torch.nn.LeakyReLU
    lin_blocks: 1
    lin_neurons: 128
    out_neurons: 1


# whole module list
modules:
    compute_features: !ref <compute_features>
    mean_var_norm: !ref <mean_var_norm>
    embedding_model: !ref <encoder>
    classifier: !ref <classifier>
    

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounterWithStopper
    limit: !ref <number_of_epochs>
    limit_to_stop: 3
    limit_warmup: 2
    direction: 'max'


# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_class: !name:torch.optim.Adam
    lr: !ref <lr_start>

# This function manages learning rate annealing over the epochs.
# We here use the simple lr annealing method that linearly decreases
# the lr from the initial value to the final one.
lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
    initial_value: !ref <lr_start>
    final_value: !ref <lr_final>
    epoch_count: !ref <number_of_epochs>

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_modle: !ref <encoder>
        classifier: !ref <classifier>
        counter: !ref <epoch_counter>
        lr_annealing: !ref <lr_annealing>
